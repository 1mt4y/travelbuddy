// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  name         String
  dateOfBirth  DateTime?
  nationality  String?
  bio          String?
  languages    String[]
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  createdTrips     Trip[]        @relation("TripCreator")
  joinedTrips      UserTrip[]
  sentMessages     Message[]     @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageReceiver")
  sentRequests     JoinRequest[] @relation("RequestSender")
  receivedRequests JoinRequest[] @relation("RequestReceiver")
}

model Trip {
  id              String     @id @default(cuid())
  title           String
  destination     String
  startDate       DateTime
  endDate         DateTime
  description     String
  activities      String[]
  maxParticipants Int
  status          TripStatus @default(OPEN)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  creatorId    String
  creator      User          @relation("TripCreator", fields: [creatorId], references: [id])
  participants UserTrip[]
  joinRequests JoinRequest[]
}

model UserTrip {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])

  @@unique([userId, tripId])
}

model JoinRequest {
  id        String        @id @default(cuid())
  message   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  senderId   String
  sender     User   @relation("RequestSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("RequestReceiver", fields: [receiverId], references: [id])
  tripId     String
  trip       Trip   @relation(fields: [tripId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  sender     User   @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id])
}

enum TripStatus {
  OPEN
  FULL
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
